import React, { Fragment, useEffect, useState } from "react";
import { Line } from "rc-progress";
import { Link, useNavigate } from "react-router-dom";
import { Tab } from "@headlessui/react";
import { useDocumentsContext } from "../context/DocumentsContext";
import toast from "react-hot-toast";

function Resume() {
    const [activeIndex, setActiveIndex] = useState(0);

    const navigate = useNavigate();
    const { tempDoc, setTemp } = useDocumentsContext();
    const [fileBlob, setFileBlob] = useState(null);
    const [paymentInitiated, setPaymentInitiated] = useState(false);
    const [message, setMessage] = useState("");
    const [percentValue, setPercentValue] = useState(0);

    const HandleChange = (e) => {
        let data;
        if (e.target.name === "resume") {
            data = { ...tempDoc, [e.target.name]: e.target.value }
            setFileBlob(e.target.files[0]);
        } else {
            data = { ...tempDoc, [e.target.name]: e.target.value };
        }
        setTemp(data);
    }
    const GetText = (file) => new Promise((resolve, reject) => {
        fetch('https://common-unst-backend.ongil.ai/api/travel/pdf-to-text/', {
            headers: {
            }, method: 'POST',
            body: file
        }).then((response) => {
            if (response.ok)
                resolve(response.json());
            else reject(response);
        })
            .catch((error) => reject(error));
    });
    const HandleSubmit = (e) => {
        e.preventDefault();
        setPaymentInitiated(true)
        GetOrderId();
        // var formdata = new FormData();
        // formdata.append("file", fileBlob, tempDoc.resume);
        // GetText(formdata)
        //     .then((response) => {
        //         console.log(response);
        //         setTemp({ ...tempDoc, parsedText: response });
        //         navigate('/result');
        //     }).catch((error) => {
        //         console.error(error);
        //     })
    }



    // Payment Gateway
    const InitPayment = (data) => {
        console.log(data, "Initiate pay");
        const options = {
            key: "rzp_test_2wAvBGCeFrYOxa",
            amount: data.amount,
            currency: 'INR',
            name: 'Resumify',
            description: 'Service charges.',
            image: 'https://cdn-icons-png.flaticon.com/128/3135/3135692.png',
            order_id: data.id,
            handler: async (resp) => {
                try {

                    console.log("RR ", resp);
                    const verifyAPI = `${import.meta.env.VITE_LOCAL_API}/api/payment/verify`;
                    await fetch(verifyAPI, { method: 'POST', body: JSON.stringify(resp), headers: { 'Content-Type': 'application/json' } })
                        .then((responce) => {
                            if (responce.ok) {
                                setPercentValue(45);
                                setMessage("Uploading File..");
                                var formdata = new FormData();
                                formdata.append("file", fileBlob, tempDoc.resume);
                                GetText(formdata)
                                    .then((response) => {
                                        console.log(response);
                                        setTemp({ ...tempDoc, parsedText: response });
                                        navigate('/result');
                                    }).catch((error) => {
                                        console.error(error);
                                        ResetAll();
                                    })
                            }
                            // console.log(responce);
                        }).catch((error) => {
                            console.log(error);
                            ResetAll();
                        })

                } catch (error) {
                    ResetAll();
                    console.log(error);
                }
            }
        }
        const rzpay = new window.Razorpay(options);
        rzpay.open();
    }
    const GetOrderId = async () => {
        const product = JSON.stringify({
            "price": 2500,
            "name": "Untitled",
            "description": "Resumefy charges"
        });
        console.log("Get Order ", (product));
        fetch(`${import.meta.env.VITE_LOCAL_API}/api/payment/orders/`, { headers: { "Content-Type": "application/json" }, method: 'POST', body: product })
            .then(async (resp) => {
                if (resp.ok) {
                    const jsonResp = await resp.json();
                    console.log("Get Order response", jsonResp);
                    InitPayment(jsonResp.data)
                } else {
                    ResetAll();
                }
            }).catch((error) => {
                ResetAll();
                toast.error("Payment service is not reachable.")
                console.log(error);
            })
    }
    const ResetAll = () => {
        setPaymentInitiated(false);
        setPercentValue(0);
        setMessage('');
    }
    useEffect(() => {
        const data = { ...tempDoc, type: "resume" };
        setTemp(data);
    }, [])

    return (
        <div className="w-full max-w-7xl mx-auto pb-8">
            <div className="container max-w-7xl mx-auto px-5">
                <form className="mt-5- bg-white p-5 rounded-md shadow-2xl space-y-4 md:space-y-6 [&_label]:text-slate-700" onSubmit={HandleSubmit}>
                    <h1 className="mt-2 mb-5 pl-2 text-2xl font-bold text-slate-700">Basic Information</h1>
                    {/* Testing UI <Link to={'/result'} className="mt-2 mb-5 pl-2 text-2xl font-bold text-slate-700">Basic Information</Link> */}
                    <div>
                        <label htmlFor="title" className="block mb-2 pl-2 text-sm font-medium text-gray-900">Title: <span className='text-red-500'>*</span></label>
                        <input type="text" name="title" id="title" className="bg-gray-50 ring-1 ring-gray-300 text-slate-800 sm:text-sm rounded-lg focus:ring-blue-600 block w-full p-2.5 outline-none focus:ring-2 placeholder:text-xs" placeholder="Resume or Job title.." required={true} value={tempDoc.title} onChange={HandleChange} />
                    </div>
                    <div className="relative">
                        <label htmlFor="resume" className="block mb-2 pl-2 text-sm font-medium text-gray-900">Upload Resume: <span className='text-red-500'>*</span></label>
                        <input type="file" multiple={false} accept=".doc, .docx, .pdf" name="resume" id="resume" value={tempDoc.resume} required={true} className="opacity-0 absolute bottom-0" onChange={HandleChange} />
                        <label htmlFor="resume" className='bg-gray-50 border-dashed border-2 border-slate-300 p-3 rounded-md min-h-36 flex justify-center items-center relative'>
                            {tempDoc.resume === '' ?
                                <>
                                    <div className=''>
                                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-12 h-12 text-blue-500">
                                            <path fillRule="evenodd" d="M10.5 3.75a6 6 0 0 0-5.98 6.496A5.25 5.25 0 0 0 6.75 20.25H18a4.5 4.5 0 0 0 2.206-8.423 3.75 3.75 0 0 0-4.133-4.303A6.001 6.001 0 0 0 10.5 3.75Zm2.03 5.47a.75.75 0 0 0-1.06 0l-3 3a.75.75 0 1 0 1.06 1.06l1.72-1.72v4.94a.75.75 0 0 0 1.5 0v-4.94l1.72 1.72a.75.75 0 1 0 1.06-1.06l-3-3Z" clipRule="evenodd" />
                                        </svg>
                                    </div>
                                    <p className='absolute bottom-5 inline-block text-xs text-slate-400'>
                                        Browse your resume <span className="text-blue-500 underline cursor-pointer">here.</span>
                                    </p>
                                </>
                                :
                                <>
                                    <div className=''>
                                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-12 h-12 text-emerald-400">
                                            <path fillRule="evenodd" d="M9 1.5H5.625c-1.036 0-1.875.84-1.875 1.875v17.25c0 1.035.84 1.875 1.875 1.875h12.75c1.035 0 1.875-.84 1.875-1.875V12.75A3.75 3.75 0 0 0 16.5 9h-1.875a1.875 1.875 0 0 1-1.875-1.875V5.25A3.75 3.75 0 0 0 9 1.5Zm6.61 10.936a.75.75 0 1 0-1.22-.872l-3.236 4.53L9.53 14.47a.75.75 0 0 0-1.06 1.06l2.25 2.25a.75.75 0 0 0 1.14-.094l3.75-5.25Z" clipRule="evenodd" />
                                            <path d="M12.971 1.816A5.23 5.23 0 0 1 14.25 5.25v1.875c0 .207.168.375.375.375H16.5a5.23 5.23 0 0 1 3.434 1.279 9.768 9.768 0 0 0-6.963-6.963Z" />
                                        </svg>
                                    </div>
                                    <p className='absolute bottom-5 inline-block text-xs text-slate-500'>
                                        <span className="text-blue-500 underline cursor-pointer">{tempDoc.resume.split('\\').reverse()[0]}</span> selected
                                    </p>
                                </>
                            }
                        </label>
                    </div>
                    <div className="grid grid-cols-8 gap-5 auto-rows-auto">
                        <div className="col-span-8 -md:col-span-5">
                            <label htmlFor="description" className="block mb-2 pl-2 text-sm font-medium text-gray-900">Job Description: <span className='text-red-500'>*</span></label>
                            <div className="mt-2.5">
                                <textarea name="description" id="description" rows="10" className="bg-gray-50 ring-1 ring-gray-300 text-slate-800 sm:text-sm rounded-lg focus:ring-blue-600 block w-full p-2.5 outline-none focus:ring-2 placeholder:text-xs placeholder:leading-relaxed" placeholder={`Position of responceblity:\n * Job Role\n * Requirments...`} required={true} value={tempDoc.description} onChange={HandleChange}></textarea>
                            </div>
                        </div>
                        {/* <div className="col-span-8 md:col-span-3">
                            <label htmlFor="information" className="block mb-2 pl-2 text-sm font-medium text-gray-900">Instructions: <span className='text-yellow-500 text-xs'>(Optional)</span></label>
                            <div className="mt-2.5">
                                <textarea name="information" id="information" rows="10" className="bg-gray-50 ring-1 ring-gray-300 text-slate-800 sm:text-sm rounded-lg focus:ring-blue-600 block w-full p-2.5 outline-none focus:ring-2 placeholder:text-xs" placeholder='Important instructions...' value={tempDoc.information} onChange={HandleChange}></textarea>
                            </div>
                        </div> */}
                    </div>
                    <div className="text-center">
                        <button className="px-8 py-2 bg-blue-500 text-white rounded-md focus:bg-blue-600 hover:bg-blue-600 active:bg-blue-400 disabled:bg-blue-300 disabled:cursor-not-allowed" disabled={paymentInitiated}>
                            Proceed to pay
                        </button>
                    </div>
                </form>
            </div>
            {
                // true && <div className="fixed w-full h-full top-0 left-0 bg-white flex justify-center items-center">
                paymentInitiated && <div className="fixed w-full h-full top-0 left-0 bg-white flex justify-center items-center">
                    <div className="text-center">
                        <span className="text-sky-400">
                            <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 16 16" className="animate-spin mx-auto"><path fill="currentColor" d="M2.501 8a5.5 5.5 0 1 1 5.5 5.5A.75.75 0 0 0 8 15a7 7 0 1 0-7-7a.75.75 0 0 0 1.501 0" /></svg>
                        </span>
                        <p>{message}</p>
                    </div>
                </div>
            }
        </div>
    );

    <Tab.Group defaultIndex={0} selectedIndex={activeIndex} onChange={index => setActiveIndex(index)}>
        <Tab.List className="flex max-w-lg mx-auto gap-14 justify-center mt-5 mb-12">
            {[1, 2, 3].map((item, index) => (
                <Tab as={Fragment} key={index} disabled={index > activeIndex}>
                    <div
                        className={`outline-none cursor-pointer relative after:content-[''] after:block after:w-10 after:h-1 after:absolute ${index <
                            activeIndex
                            ? "after:bg-sky-300"
                            : "after:bg-gray-200"
                            } after:left-14 after:top-6 last-of-type:after:hidden`}
                    >
                        <div
                            className={`w-12 grid place-content-center text-xl font-bold aspect-square rounded-full z-20 ${index <=
                                activeIndex
                                ? "bg-sky-200 text-sky-600"
                                : "bg-gray-200 text-slate-600"
                                }`}
                        >
                            {index <
                                activeIndex ? (
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    strokeWidth={
                                        3
                                    }
                                    stroke="currentColor"
                                    className="w-6 h-6"
                                >
                                    <path
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                        d="m4.5 12.75 6 6 9-13.5"
                                    />
                                </svg>
                            ) : (
                                <>
                                    {index +
                                        1}
                                </>
                            )}
                        </div>
                    </div>
                </Tab>
            ))}
        </Tab.List>
        <Tab.Panels className={"outline-none"}>
            <Tab.Panel className={"outline-none"}>
                <div className='container max-w-7xl mx-auto text-slate-700'>
                    <div className='px-5'>
                        <h3 className='font-bold text-2xl text-slate-700 text-center mb-5'>
                            Upload Resume
                        </h3>
                        <div className='w-full max-w-3xl mx-auto'>
                            <div className='bg-white p-5 rounded-md shadow-md'>
                                <div className='border-dashed border-2 border-slate-300 p-3 rounded-md min-h-36 flex justify-center items-center relative'>
                                    <div className=''>
                                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-12 h-12 text-blue-500">
                                            <path fillRule="evenodd" d="M10.5 3.75a6 6 0 0 0-5.98 6.496A5.25 5.25 0 0 0 6.75 20.25H18a4.5 4.5 0 0 0 2.206-8.423 3.75 3.75 0 0 0-4.133-4.303A6.001 6.001 0 0 0 10.5 3.75Zm2.03 5.47a.75.75 0 0 0-1.06 0l-3 3a.75.75 0 1 0 1.06 1.06l1.72-1.72v4.94a.75.75 0 0 0 1.5 0v-4.94l1.72 1.72a.75.75 0 1 0 1.06-1.06l-3-3Z" clipRule="evenodd" />
                                        </svg>
                                    </div>
                                    <p className='absolute bottom-5 inline-block text-xs text-slate-400'>
                                        Drag and drop files here or click
                                    </p>
                                </div>
                            </div>

                            <div className='text-center mt-5'>
                                <button className='bg-sky-500 text-white px-12 py-2 rounded-md' onClick={() => setActiveIndex(1)}>
                                    Continue
                                </button>
                            </div>
                            <div className='text-xs my-5'>
                                <div className="flex p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50 ring-1 ring-red-300" role="alert">
                                    <svg className="flex-shrink-0 inline w-4 h-4 me-3 mt-[2px]" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                        <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
                                    </svg>
                                    <span className="sr-only">Instructions</span>
                                    <div>
                                        <span className="font-medium">Instructions:</span>
                                        <ul className="mt-1.5 list-disc list-inside">
                                            <li>Resume shold not exceed more then 2 pages.</li>
                                            <li>For better results, resume content should not be clumsy.</li>
                                            <li>Make sure you have all importent sections on your resume.</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </Tab.Panel>
            <Tab.Panel className={"outline-none"}>
                <JobDetails setActiveIndex={setActiveIndex} setFormData={setFormData} />
            </Tab.Panel>
            <Tab.Panel className={"outline-none"}>Content 3</Tab.Panel>
        </Tab.Panels>
    </Tab.Group>
}

export default Resume;